#version 430 core


struct PointLight {    
    vec3 position;
    float constant;
    vec3 ambient;
    float linear;
    vec3 diffuse;
    float quadratic;
    vec3 specular;
    float shininess;
};  
struct Sphere
{
	vec3 c;
	float r;
};

struct VisibleIndex
{
	int index;
};
#define LOCAL_TILE_SIZE 16

layout (local_size_x = LOCAL_TILE_SIZE, local_size_y = LOCAL_TILE_SIZE, local_size_z = 1)in;

layout(binding = 0, r32F)		
coherent uniform image2D  debug_image;
layout(binding = 1, std430) buffer  light_buffer
{ 
	PointLight light_data[]; 
};
layout(binding = 2, std430) buffer  visible_index_buffer
{ 
	VisibleIndex light_index[]; 
};

uniform int window_width;
uniform int window_height;
uniform int point_light_count;
uniform sampler2D depth_map;//populated by a z prepass!!!
uniform mat4 proj;
uniform mat4 view;

shared int visible_light_indices[1024];
shared int visible_light_count;
shared uint max_depth_uint;
shared uint min_depth_uint;
shared float min_depth, max_depth;
shared ivec2 screen_size;

shared vec4 frustum_planes[6];
//this is super slow, maybe make it smaller
float linearize_depth(float d)
{
	float A = proj[2].z;
    float B = proj[3].z;
    float zNear = - B / (1.0 - A);
    float zFar  =   B / (1.0 + A);
	return (2.0 * zNear) / (zFar + zNear - d * (zFar - zNear));
}
void main()
{
	//[1]first we initialize shared stuff, find our tiles coords etc..
	ivec2 location = ivec2(gl_GlobalInvocationID.xy);
	ivec2 itemID = ivec2(gl_LocalInvocationID.xy);
	ivec2 tileID = ivec2(gl_WorkGroupID.xy);
	ivec2 tile_number = ivec2(gl_NumWorkGroups.xy);
	uint index = tileID.y * tile_number.x + tileID.x;
  if (gl_LocalInvocationIndex == 0)
  {
	  visible_light_count = 0;
	  max_depth_uint = 0;
	  min_depth_uint = 0xFFFFFFFF;
	  screen_size = ivec2(window_width, window_height);
  }
  barrier();
  
  //[2]now we find the smallest and largest depths for our (whole) 16x16 tile
  
  //float max_depth, min_depth;
  vec2 tex_coords = vec2(location) / screen_size;
  
	
  float depth = texture(depth_map, tex_coords).r;
  //depth = linearize_depth(depth);
  //depth = screen_to_view(vec4(location.x, location.y,depth, 1)).z;
  //depth = (0.5 * proj[3][2]) / (depth + 0.5 * proj[2][2] - 0.5);
  uint depth_uint = floatBitsToUint(depth);
  atomicMin(min_depth_uint, depth_uint);
  atomicMax(max_depth_uint, depth_uint);
  
  barrier();  
  //[3]now we calculate the culling frustum for each tile
  if (gl_LocalInvocationIndex == 0)
  {
	  
	  min_depth = uintBitsToFloat(min_depth_uint);
	  max_depth = uintBitsToFloat(max_depth_uint);
	  vec4 vs_min_depth = (inverse(proj) * vec4(0,0,2 * min_depth - 1, 1));
	  vec4 vs_max_depth = (inverse(proj) * vec4(0,0,2 * max_depth - 1, 1));
	  vs_min_depth /= vs_min_depth.w;
	  vs_min_depth /= vs_max_depth.w;
	  min_depth = vs_min_depth.z;
	  max_depth = vs_max_depth.z;
	  
	  
	  
	  	vec2 tile_scale = vec2(screen_size) * (1.0 / float(2 * LOCAL_TILE_SIZE));
		vec2 tile_bias = tile_scale - vec2(gl_WorkGroupID.xy);

		vec4 col1 = vec4(-proj[0][0] * tile_scale.x, proj[0][1], tile_bias.x, proj[0][3]);
		vec4 col2 = vec4(proj[1][0], -proj[1][1] * tile_scale.y, tile_bias.y, proj[1][3]);
		vec4 col4 = vec4(proj[3][0], proj[3][1], -1.0, proj[3][3]);

		frustum_planes[0] = col4 + col1;
		frustum_planes[1] = col4 - col1;
		frustum_planes[2] = col4 - col2;
		frustum_planes[3] = col4 + col2;
		frustum_planes[4] = vec4(0.0, 0.0, 1.0, -min_depth);
		frustum_planes[5] = vec4(0.0, 0.0, -1.0, max_depth);
		for (uint i = 0; i < 4; i++) {
			frustum_planes[i] *= 1.0f / length(frustum_planes[i].xyz);
		}
		
  }
  barrier();
  
  uint thread_count = LOCAL_TILE_SIZE * LOCAL_TILE_SIZE;
  uint pass_count = (point_light_count + thread_count - 1) / thread_count;
  float near_clip;
  for (uint i = 0; i < pass_count; ++i)
  {
	  uint light_idx = i * thread_count  + gl_LocalInvocationIndex;
	  if (light_idx >= point_light_count)break;
	  
	  vec3 position = light_data[light_idx].position;
	  float radius = 3.0;
	  vec4 lposition = (view * vec4(position, 1.0)).xyzw;
	  bool in_frustum = true;
	  for (uint j = 0;j < 6 && in_frustum; ++j)
	  {
		  float d = dot(frustum_planes[j], lposition);
		  in_frustum = (d >= -radius);//light.rad
	  }
	  if (in_frustum)
	  {
		  uint offset = atomicAdd(visible_light_count, 1);
		  visible_light_indices[offset] = int(light_idx);
	  }
	  
  }
  barrier();
  imageStore(debug_image, location, vec4(float(visible_light_count), 0,0,0));
  barrier();
  //[5] One thread should fill the global light buffer
	if (gl_LocalInvocationIndex == 0) {
		uint offset = index * 1024; // Determine bosition in global buffer
		
		for (uint i = 0; i < visible_light_count; i++) {
			light_index[offset + i].index = visible_light_indices[i];
		}

		if(visible_light_count != 1024) {
			// Unless we have totally filled the entire array, mark it's end with -1
			// Final shader step will use this to determine where to stop (without having to pass the light count)
			light_index[offset + visible_light_count].index = -1;
		}
	}
  barrier();
}
























/*
barrier();
  
  //[3]now we calculate the culling frustum for each tile
  if (gl_LocalInvocationIndex == 0)
  {
	  
	  min_depth = uintBitsToFloat(min_depth_uint);
	  
	  max_depth = uintBitsToFloat(max_depth_uint);
	  vec3 eye_pos = vec3(0,0,0);
	  //first we find the planes at screen space
	  vec4 coords[4];
	  coords[0] = vec4(gl_WorkGroupID.x * LOCAL_TILE_SIZE, gl_WorkGroupID.y * LOCAL_TILE_SIZE, -1.0,1.0); //BL
	  coords[1] = vec4((gl_WorkGroupID.x+1) * LOCAL_TILE_SIZE, gl_WorkGroupID.y * LOCAL_TILE_SIZE, -1.0,1.0); //BR
	  coords[2] = vec4(gl_WorkGroupID.x * LOCAL_TILE_SIZE, (gl_WorkGroupID.y+1) * LOCAL_TILE_SIZE, -1.0,1.0); //TL
	  coords[3] = vec4((gl_WorkGroupID.x+1) * LOCAL_TILE_SIZE, (gl_WorkGroupID.y+1) * LOCAL_TILE_SIZE, -1.0,1.0); //TR
	  //then we transform them to view space!!
	  for (uint i = 0; i < 4; ++i)
	  {
		  coords[i] = screen_to_view(coords[i]);
	  }
	  //now we comstruct the frustum planes!!!!
	  frustum.planes[0] = compute_plane(eye_pos, vec3(coords[0]), vec3(coords[2])); //left
	  frustum.planes[1] = compute_plane(eye_pos, vec3(coords[1]), vec3(coords[3])); //right
      frustum.planes[2] = compute_plane(eye_pos, vec3(coords[3]), vec3(coords[2])); //top
      frustum.planes[3] = compute_plane(eye_pos, vec3(coords[0]), vec3(coords[1])); //bottom
  }
  barrier();
  
  //[4] the threads fill the shared light index buffer for THIS (16x16) tile
  uint thread_count = LOCAL_TILE_SIZE * LOCAL_TILE_SIZE;
  uint pass_count = (point_light_count + thread_count - 1) / thread_count;
  float near_clip;
  for (uint i = 0; i < pass_count; ++i)
  {
	  uint light_idx = i * thread_count  + gl_LocalInvocationIndex;
	  if (light_idx >= point_light_count)break;
	  
	  vec3 position = light_data[light_idx].position;
	  float radius = 20.0;
	  Sphere pl = sphere_init(position, radius);
	  near_clip = screen_to_view(vec4( 0, 0, 0, 1 )).z;
	  //min_depth = screen_to_view(vec4(0,0,min_depth, 1)).z;
	  //max_depth = screen_to_view(vec4(0,0,max_depth,1)).z;
	  if (sphere_inside_frustum(pl, frustum, near_clip, max_depth))
	  {
		  uint offset = atomicAdd(visible_light_count, 1);
		  visible_light_indices[offset] = int(light_idx);
	  }
	  
  }
  barrier();
  vec4 test = screen_to_view(vec4(0,0,0.5,1));
  imageStore(debug_image, location, vec4(test.z, 0,0,0));
  barrier();
  */



